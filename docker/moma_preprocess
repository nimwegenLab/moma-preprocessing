#!/usr/bin/env bash

###
# This script parses the command options for the preprocessing and calls the docker container for running the
# containerized preprocessing instance.
###

docker_image_name="mmpreprocesspy:v0.2.0"
docker_container_name="${docker_image_name//\:/"__"}"

echo $docker_image_name
echo $docker_container_name

container_input_path="/data/input_path"
container_output_path="/data/output_path"

SHORT=i:,o:,p:,r:
LONG=tmax:,roi_boundary_offset_at_mother_cell:,gl_detection_template_path:,normalization_config_path:,normalization_region_offset:,frames_to_ignore:,image_registration_method:,forced_intensity_normalization_range:,log:

OPTS=$(getopt --alternative --name moma_preprocess --options $SHORT --longoptions $LONG -- "$@")

eval set -- "$OPTS"

CMD_ARGUMENTS=""

# This while loop captures paths that will be mount directories to the container.
# Other arguments are appended to the variable CMD_ARGUMENTS, which is passed as command line argument to the container.
while :
do
  case "$1" in
    -i )
      input_path="$2"
      shift 2
      ;;
    -o )
      output_path="$2"
      shift 2
      ;;
    -- )
      shift;
      break
      ;;
    * )
      CMD_ARGUMENTS="${CMD_ARGUMENTS} $1 $2"
      shift 2;
      ;;
  esac
done

#echo "docker run --mount type=bind,src=${input_path},target=${container_input_path} --mount type=bind,src=${input_path},${container_output_path}"
echo "docker create --name ${docker_container_name} ${docker_image_name}"
docker container inspect ${docker_container_name} > /dev/null 2>&1
container_exists=$?
if [ ${container_exists} == 0 ]; then
  printf "Docker container (name=%s) exists. Removing it before starting new instance.\n" "${docker_container_name}"
  docker rm ${docker_container_name}
fi
#echo "[ ${container_exists} -eq 0 ] || docker create --name ${docker_container_name} ${docker_image_name}"

#DOCKER_COMMAND="docker run --name ${docker_container_name} --mount type=bind,src=${input_path},target=${container_input_path} --mount type=bind,src=${output_path},${container_output_path} ${docker_image_name}"
docker run --name "${docker_container_name}" --mount type=bind,src="${input_path}",target=${container_input_path} --mount type=bind,src="${output_path}",target="${container_output_path}" -it "${docker_image_name}" /bin/bash

#echo "$DOCKER_COMMAND"
#eval "$DOCKER_COMMAND"

#echo "docker run --mount type=bind,src=${input_path},target=${container_input_path} --mount type=bind,src=${input_path},${container_output_path} ${docker_image_name}"